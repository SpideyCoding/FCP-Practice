# Problem Set 1

## Mirror Circles
![Problem 1.1](P1_1.svg){fig-align="left"}
```c
#include <sketch.h>

void bottom_circle(float bx, float by, float r)
{
    float cx = bx;
    float cy = by + r;

    draw_circle(cx, cy, r);
}

void bottom_circle_inverse(float bx, float by, float r)
{
    float cx = bx;
    float cy = by - r;

    draw_circle(cx, cy, r);
}

void draw_candle_light(float x, float y, float r)
{
    bottom_circle(x, y, r / 3);
    bottom_circle(x, y, 2 * r / 3);
    bottom_circle(x, y, r);
}

void draw_candle_light_inverse(float x, float y, float r)
{
    bottom_circle_inverse(x, y, r / 3);
    bottom_circle_inverse(x, y, 2 * r / 3);
    bottom_circle_inverse(x, y, r);
}

int main()
{
    draw_candle_light(-100, 0, 100);
    draw_candle_light(100, 0, 100);
    draw_candle_light_inverse(-100, 0, 100);
    draw_candle_light_inverse(100, 0, 100);

    save_sketch("p1_1.svg");
}
```

## Row of Circles
![Problem 1.2](P1_2.svg){fig-align="left"}
```c
#include <sketch.h>

int main()
{
    for(int x = -200; x <= 200; x += 100)
    {
        draw_circle(x, 0, 50);
    }

    save_sketch("P1_2.svg");
}
```

## Row of Concentric Circles
![Problem 1.3](P1_3.svg){fig-align="left"}
```c
#include <sketch.h>

void concentric_circles(float x, float y, float r, float n)
{
    for (int i = 1; i <= n; i++)
    {
        draw_circle(x, y, i * r / n);
    }
}

int main()
{
    for(int x = -200, i = 1; x <= 200; x += 100, i++)
    {
        concentric_circles(x, 0, 50, i);
    }

    save_sketch("P1_3.svg");
}
```

## Growing Circles
![Problem 1.4](P1_4.svg){fig-align="left"}
```c
#include <sketch.h>
#include <math.h>

void bottom_circle(float bx, float by, float r)
{
    float cx = bx;
    float cy = by + r;

    draw_circle(cx, cy, r);
}

int main()
{
    int r = 30;
    float dr = r/2;
    for(float x = r - 300; x <= 300 - r; x += sqrt(pow(2*r + dr, 2) - pow(dr, 2)), r += dr)
    {
        bottom_circle(x, 0, r);
    }

    save_sketch("P1_4.svg");
}
```

## Growing Candle Lights
![Problem 1.5](P1_5.svg){fig-align="left"}
```c
#include <sketch.h>
#include <math.h>

void bottom_circle(float bx, float by, float r)
{
    float cx = bx;
    float cy = by + r;

    draw_circle(cx, cy, r);
}

void draw_candle_light(float x, float y, float r)
{
    bottom_circle(x, y, r / 3);
    bottom_circle(x, y, 2 * r / 3);
    bottom_circle(x, y, r);
}

int main()
{
    int r = 30;
    float dr = r/2;
    for(float x = r - 300; x <= 300 - r; x += sqrt(pow(2*r + dr, 2) - pow(dr, 2)), r += dr)
    {
        draw_candle_light(x, 0, r);
    }

    save_sketch("P1_5.svg");
}
```

## Grid of Candle Lights
![Problem 1.6](P1_6.svg){fig-align="left"}
```c
#include <sketch.h>

void bottom_circle(float bx, float by, float r)
{
    float cx = bx;
    float cy = by + r;

    draw_circle(cx, cy, r);
}

void draw_candle_light(float x, float y, float r)
{
    bottom_circle(x, y, r / 3);
    bottom_circle(x, y, 2 * r / 3);
    bottom_circle(x, y, r);
}

void make_grid(int n)
{
    float dx = 600/n;
    float dy = dx;

    float x0 = -300+dx/2;
    float y0 = -300+dy/2;

    for (float x=x0; x<300; x+=dx)
    {
        for (float y=y0; y<300; y+=dy)
        {
            draw_candle_light(x, y - dx/2, dx / 2);
        }
    }
}

int main() {
    make_grid(6);
    save_sketch("P1_6.svg");
}
```

## Grid of Concentric Circles
![Problem 1.7](P1_7.svg){fig-align="left"}
```c
#include <sketch.h>

float max(float a, float b) {
    return a>b? a: b;
}

void concentric_circles(float x, float y, float radius, int n)
{
    float r = radius/n;

    for (int i=1; i<=n; i++) {
        draw_circle(x, y, i*r);
    }
}

void draw_shape(float x, float y, float size, int i, int j, int n) {
    concentric_circles(x, y, size/2, 1+max(i, j));
}

void make_grid(int n)
{
    float dx = 600/n;
    float dy = dx;

    float x0 = -300+dx/2;
    float y0 = 300-dy/2;

    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            float x = x0+i*dx;
            float y = y0-j*dy;
            draw_shape(x, y, dx, i, j, n);
        }
    }
}

int main() {
    make_grid(6);
    save_sketch("P1_7.svg");
}
```

## The Complex Grid
![Problem 1.8](P1_8.svg){fig-align="left"}
```c
#include <sketch.h>
#include <math.h>

float min(float a, float b) {
    return a<b? a: b;
}

void concentric_circles(float x, float y, float radius, int n)
{
    float r = radius/n;

    for (int i=1; i<=n; i++) {
        draw_circle(x, y, i*r);
    }
}

void draw_shape(float x, float y, float size, int i, int j, int n) {
    concentric_circles(x, y, size/2, 1 + min(abs(5-i), abs(5-j)));
}

void make_grid1(int n)
{
    float dx = 600/n;
    float dy = dx;

    float x0 = -300+dx/2;
    float y0 = 300-dy/2;

    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            float x = x0+i*dx;
            float y = y0-j*dy;
            draw_shape(x, y, dx, i, j, n);
        }
    }
}

int main() {
    make_grid1(11);
    save_sketch("P1_8.svg");
}
```

## Packed circles
![Problem 1.9](P1_9.svg){fig-align="left"}
```c
#include <sketch.h>
#include <math.h>

int main()
{
    draw_circle(0, 0, 150);
    draw_circle(0, 0, 50);

    for(float a = 0; a <= 2*M_PI; a += M_PI/3)
    {
        draw_circle(100*cos(a), 100*sin(a), 50);
    }

    save_sketch("P1_9.svg");
}
```

## Packed Candle Lights
![Problem 1.10](P1_10.svg){fig-align="left"}
```c
#include <sketch.h>
#include <math.h>

void bottom_circle(float bx, float by, float r)
{
    float cx = bx;
    float cy = by + r;

    draw_circle(cx, cy, r);
}

void draw_candle_light(float x, float y, float r)
{
    bottom_circle(x, y, r / 3);
    bottom_circle(x, y, 2 * r / 3);
    bottom_circle(x, y, r);
}

void rotated_candle_light(float x, float y, float r, float a)
{
    draw_circle(x + 2 * (r / 3) * cos(a), y + 2 * (r / 3) * sin(a), r / 3);
    draw_circle(x + (r / 3) * cos(a), y + (r / 3) * sin(a), 2 * r / 3);
    draw_circle(x, y, r);
}

int main()
{
    draw_circle(0, 0, 150);
    draw_circle(0, 0, 50);
    draw_circle(0, 0, 100/3);
    draw_circle(0, 0, 50/3);

    for(float a = 0; a <= 2*M_PI; a += M_PI/3)
    {
        rotated_candle_light(100*cos(a), 100*sin(a), 50, M_PI + a);
    }

    save_sketch("P1_10.svg");
}
```